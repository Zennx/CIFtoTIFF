# NOTE: RUN ON CONDA Environment "ImgConvert"
# The dependencies are installed there (base python have conflicts!)
# This code will run a GUI to prompt users to enter the image directory
# and will convert them into standard, CellProfiler-friendly TIFF for analysis
# to another directory, suitable for batch single-image analysis.
# This fixes the issue with AMNIS IDEAS TIFF export feature.

# DISCLAIMER!!!
# This code CANNOT produce true RAW 16-bit TIFF images as AMNIS ONLY export
# compensated and compressed images from .cif, which is a bug from AMNIS
# IDEAS and do note on the implications of running analysis on lossy files.

# Code generated by ChatGPT (17/4/2025) in direction, prompts, and troubleshooting by Zen.



### CIF to TIFF Converter with GUI Channel Selection ###

import tkinter as tk
from tkinter import filedialog, messagebox
import bioformats
import javabridge
import tifffile
import numpy as np
import os

# Initialize Java for Bioformats
javabridge.start_vm(class_path=bioformats.JARS)

# Load Java reader
reader_class = bioformats.formatreader.make_image_reader_class()
rdr = reader_class()


# Function to get channel names from CIF
def get_cif_metadata(file_path):
    metadata = bioformats.get_omexml_metadata(file_path)
    omexml = bioformats.OMEXML(metadata)
    image = omexml.image(0)
    channels = image.Pixels.Channel
    channel_names = [channels(c).Name for c in range(image.Pixels.SizeC)]
    return channel_names, image.Pixels.SizeC

# Function to convert selected channels to TIFFs
def convert_channels(cif_path, out_dir, selected_channels):
    reader = bioformats.ImageReader(cif_path, perform_init=True)
    omexml_metadata = bioformats.get_omexml_metadata(cif_path)
    omexml = bioformats.OMEXML(omexml_metadata)
    
    series_count = omexml.get_image_count()

    for s in range(series_count):
        reader.rdr.setSeries(s)  # Select current series (cell)
        for c in selected_channels:
            try:
                plane = reader.read(z=0, t=0, c=c, rescale=False)
                prefix = name_var.get().strip() or os.path.splitext(os.path.basename(cif_path))[0]
                output_name = f"{prefix}_Series{s}_Ch{c+1}.tiff"
                out_path = os.path.join(out_dir, output_name)
                tifffile.imwrite(out_path, plane.astype(np.uint16))
            except Exception as e:
                print(f"[ERROR] Failed exporting S{s} Ch{c+1}: {e}")
    
    reader.close()

# GUI for selecting file, channels, and exporting
def launch_gui():
    root = tk.Tk()
    root.title("CIF to TIFF Converter")

    def select_file():
        file_path = filedialog.askopenfilename(filetypes=[("CIF files", "*.cif")])
        if not file_path:
            return
        channel_names, _ = get_cif_metadata(file_path)
        file_label.config(text=file_path)
        for i, name in enumerate(channel_names):
            var = tk.IntVar()
            cb = tk.Checkbutton(channel_frame, text=f"Ch{i+1}: {name}", variable=var)
            cb.pack(anchor='w')
            channel_vars.append((i, var))
        selected_file["path"] = file_path

    def export():
        prefix = name_var.get().strip()
        if not prefix:
            prefix = os.path.splitext(os.path.basename(cif_path))[0]
        if not selected_file.get("path"):
            messagebox.showerror("Error", "No CIF file selected.")
            return
        out_dir = filedialog.askdirectory()
        selected_channels = [i for i, var in channel_vars if var.get() == 1]
        if not selected_channels:
            messagebox.showerror("Error", "No channels selected.")
            return
        convert_channels(selected_file["path"], out_dir, selected_channels)
        messagebox.showinfo("Done", "Export complete!")

    selected_file = {}
    channel_vars = []

    tk.Button(root, text="Select CIF File", command=select_file).pack()
    file_label = tk.Label(root, text="No file selected")
    file_label.pack()

    channel_frame = tk.Frame(root)
    channel_frame.pack()

    tk.Button(root, text="Export Selected Channels", command=export).pack(pady=10)
    
    # Add prefix input field
    global name_var
    name_var=tk.StringVar()
    prefix_label = tk.Label(root, text="Custom File Prefix:").pack()
    prefix_entry = tk.Entry(root, textvariable = name_var).pack()
    root.mainloop()


# Run the GUI
launch_gui()

# Shutdown Java when done
javabridge.kill_vm()
